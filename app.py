from flask import Flask, render_template, request, session, redirect, url_for, flash
from sqlalchemy import create_engine, Column, Integer, String, Boolean, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from werkzeug.security import generate_password_hash, check_password_hash
from setup_db import User, ToDo

app = Flask(__name__)# Creates the Flask app
app.secret_key = 'erjopur[ur=0gr=0rbu-ie-g29-be29u'# Secret key for the session. Generated by mashing the keyboard.


engine = create_engine('sqlite:///todo.db')# Connects to the database
Session = sessionmaker(bind=engine)
db_session = Session()


@app.route('/')# Define the index route
def index():
    return render_template('index.html')# Renders the index page


@app.route('/login', methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form.get('username')
        password = request.form.get('password')

        user = db_session.query(User).filter_by(username=username).first()
        if user and check_password_hash(user.password, password):
            session["user_id"] = user.id
            session["username"] = user.username
            flash("Logged in successfully", "info")
            return redirect(url_for('dashboard'))
        else:
            flash("Invalid username or password", "error")

    return render_template('login.html')

@app.route('/signup', methods=["GET", "POST"])# Define the signup route
def signup():
    if request.method == "POST":# Get form data
        username = request.form.get('username')
        email = request.form.get('email')
        password = request.form.get('password')
        
        existing_user = db_session.query(User).filter((User.username == username) | (User.email == email)).first()# Check if username or email already exists
        if existing_user:
            flash("Username or email already exists. Please choose another.", "error")
            return redirect(url_for('signup'))
        
        password = generate_password_hash(password)# Hash the password for security
        
        new_user = User(username = username, email = email, password = password)# Create a new user instance
        
        db_session.add(new_user)# Add and commit the new user to the database
        db_session.commit()
        
        flash("Account created successfully! Please log in.", "success")
        return redirect(url_for('login'))
    
    return render_template('signup.html')# Render the signup page for GET requests


@app.route('/dashboard')
def dashboard():
    if "user_id" not in session:
        flash("You need to login first", "warning")
        return redirect(url_for('login'))  # Redirect to the login page if the user is not logged in
    
    # Check if it's the first time visiting the dashboard after login or logout
    if 'first_login' in session and session['first_login']:
        flash("Welcome back, {}!".format(session["username"]), "info")
        session['first_login'] = False  # Set 'first_login' to False after showing the message
    
    return render_template('dashboard.html', user_id=session["user_id"], username=session["username"])


@app.route('/create')# Define the create route
def create():
    if "user_id" not in session:# Checks if the user is logged in, and redirects to login if not
        flash("You need to login first", "warning")
        return redirect(url_for('login'))# Redirects to the login page

    return render_template('create.html', user_id=session["user_id"], username=session["username"])# Renders the create page and stores the current users id and username in the session


@app.route('/logout')# Defines the logout route
def logout():
    session.clear()# Clears the session
    flash("You have been logged out", "info")
    return redirect(url_for('index'))# Redirects to the index page

app.run(debug=True)# Runs the app in debug mode